import tkinter as tk
import math

# Initialize the board and player markers
board = [' '] * 9
player_marker = 'X'
ai_marker = 'O'

# Check for a win
def check_winner(player):
    return (
        (board[0] == board[1] == board[2] == player) or
        (board[3] == board[4] == board[5] == player) or
        (board[6] == board[7] == board[8] == player) or
        (board[0] == board[3] == board[6] == player) or
        (board[1] == board[4] == board[7] == player) or
        (board[2] == board[5] == board[8] == player) or
        (board[0] == board[4] == board[8] == player) or
        (board[2] == board[4] == board[6] == player)
    )

# Check for a draw
def check_draw():
    return ' ' not in board

# Get available moves
def get_available_moves():
    return [i for i, mark in enumerate(board) if mark == ' ']

# Minimax algorithm
def minimax(board, depth, is_maximizing):
    if check_winner(ai_marker):
        return 1
    elif check_winner(player_marker):
        return -1
    elif check_draw():
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for move in get_available_moves():
            board[move] = ai_marker
            eval = minimax(board, depth + 1, False)
            board[move] = ' '
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = math.inf
        for move in get_available_moves():
            board[move] = player_marker
            eval = minimax(board, depth + 1, True)
            board[move] = ' '
            min_eval = min(min_eval, eval)
        return min_eval

# Make AI move
def make_ai_move():
    best_move = None
    best_eval = -math.inf
    for move in get_available_moves():
        board[move] = ai_marker
        eval = minimax(board, 0, False)
        board[move] = ' '
        if eval > best_eval:
            best_eval = eval
            best_move = move
    board[best_move] = ai_marker
    buttons[best_move].config(text=ai_marker)
    if check_winner(ai_marker):
        result_label.config(text="AI wins!")
        disable_buttons()
    elif check_draw():
        result_label.config(text="It's a draw!")
        disable_buttons()

# Handle button click
def on_button_click(idx):
    if board[idx] == ' ':
        buttons[idx].config(text=player_marker)
        board[idx] = player_marker

        if check_winner(player_marker):
            result_label.config(text="You win!")
            disable_buttons()
        elif check_draw():
            result_label.config(text="It's a draw!")
            disable_buttons()
        else:
            make_ai_move()

# Disable all buttons
def disable_buttons():
    for button in buttons:
        button.config(state=tk.DISABLED)

# Create the GUI
root = tk.Tk()
root.title("Tic-Tac-Toe")

buttons = []
for i in range(9):
    row = i // 3
    col = i % 3
    button = tk.Button(root, text=' ', font=('normal', 24), width=6, height=2,
                       command=lambda idx=i: on_button_click(idx))
    button.grid(row=row, column=col)
    buttons.append(button)

result_label = tk.Label(root, text='', font=('normal', 16))
result_label.grid(row=3, columnspan=3)

root.mainloop()
